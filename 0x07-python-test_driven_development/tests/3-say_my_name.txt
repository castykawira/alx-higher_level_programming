Test cases for say_my_name function

===========================
To use the say_my_name function, provide a first name (and optionally a last name) 
as strings to print a formatted name string

Usage
=====

``say_my_name(...)`` prints "My name is <first_name> <last_name>".

::

    >>> say_my_name = __import__('3-say_my_name').say_my_name
    >>> say_my_name("Einstein", "Smith")
    My name is Einstein Smith

::

    >>> say_my_name("Emily Johnson", "Michael")
    My name is Emily Johnson Michael

The parameter ```last_name``` is optional. If no last name is provided,
an empty string is printed instead.

::

    >>> say_my_name("Davis")
    My name is Davis 

Invalid Names
=============

The parameters ``first_name`` and ``last_name``` must be strings. Otherwise,
a TypeError is raised.

::

    >>> say_my_name(4, "Lucas")
    Traceback (most recent call last):
    TypeError: first_name must be a string

::

    >>> say_my_name("Alice", ["Doe", "John", "Bob"])
    Traceback (most recent call last):
    TypeError: last_name must be a string

::

    >>> say_my_name({"Luke": 4, "Matthew": 11}, 5.6)
    Traceback (most recent call last):
    TypeError: first_name must be a string

::

    >>> say_my_name(None)
    Traceback (most recent call last):
    TypeError: first_name must be a string

At least one name must be provided.

::

    >>> say_my_name()
    Traceback (most recent call last):
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'
